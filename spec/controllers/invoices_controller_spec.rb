require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe InvoicesController, type: :controller do
  let(:create_invoice){ CustomersBill.new.get_bill }
  let(:create_invoice_json){ JSON.parse(create_invoice.body) }
  let(:invalid_json_file){ 'invalid.json' }


  describe "GET #show" do
    context "with a valid resources" do
      before :each do
        create_invoice
        create_invoice_json
        get :show
      end

      it "is successful" do
        expect(response.status).to eq 200
      end

      it "renders template :show" do
        expect(response).to render_template :show
      end

      context "instance variable @invoice" do
        it "has the status code: '200'" do
          expect(assigns(:invoice).code).to eq '200'
        end

        it "has the requested bill assigned" do
          expect(assigns(:invoice).body).to eq create_invoice.body
        end
      end

      context "instance variable @invoice_json" do
        it "has the requested bills body assigned" do
          expect(assigns(:invoice_json)).to eq create_invoice_json
        end
      end
    end

    context  "with an invalid resources" do
      before :each do
        @invalid_json_file = invalid_json_file
        get :show, billing_file: invalid_json_file
      end

      it "is successful" do
        expect(response.status).to eq 200
      end

      it "renders template :show" do
        expect(response).to render_template :show
      end

      context "instance variable @invoice" do
        it "has the status code: '404'" do
          expect(assigns(:invoice).code).to eq '404'
        end

        it "@invoice.body has the error message included: 'Cannot GET /#{ @invalid_json_file }'" do
          expect(assigns(:invoice).body).to include "Cannot GET /#{ @invalid_json_file }"
        end
      end

      context "instance variable @invoice_json" do
        it "is not set and returns: nil" do
          expect(assigns(:invoice_json)).to be nil
        end
      end
    end
  end
end
